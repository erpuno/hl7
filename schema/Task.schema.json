{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://hl7.erp.uno/schema/Task.schema.json",
  "$ref": "#/definitions/Task",
  "description": "see https://hl7.org/fhir/R5/json.html for information about the FHIR Json Schemas",
  "definitions": {
    "ElementDefinition": {
      "allOf": [
        {
          "$ref": "Element.schema.json#/definitions/Element"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "path": {
              "description": "The path identifies the element and is expressed as a \".\"-separated list of ancestor elements, beginning with the name of the resource or extension.",
              "type": "string"
            },
            "_path": {
              "description": "Extensions for path",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "representation": {
              "description": "Codes that define how this element is represented in instances, when the deviation varies from the normal case.",
              "enum": [
                "xmlAttr",
                "xmlText",
                "typeAttr",
                "cdaText",
                "xhtml"
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "_representation": {
              "description": "Extensions for representation",
              "type": "array",
              "items": {
                "$ref": "Element.schema.json#/definitions/Element"
              }
            },
            "sliceName": {
              "description": "The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.",
              "type": "string"
            },
            "_sliceName": {
              "description": "Extensions for sliceName",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "label": {
              "description": "A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.",
              "type": "string"
            },
            "_label": {
              "description": "Extensions for label",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "code": {
              "description": "A code that has the same meaning as the element in a particular terminology.",
              "type": "array",
              "items": {
                "$ref": "Coding.schema.json#/definitions/Coding"
              }
            },
            "slicing": {
              "description": "Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).",
              "$ref": "#/definitions/ElementDefinition_Slicing"
            },
            "short": {
              "description": "A concise description of what this element means (e.g. for use in autogenerated summaries).",
              "type": "string"
            },
            "_short": {
              "description": "Extensions for short",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "definition": {
              "description": "Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource.",
              "type": "string"
            },
            "_definition": {
              "description": "Extensions for definition",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "comment": {
              "description": "Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc.",
              "type": "string"
            },
            "_comment": {
              "description": "Extensions for comment",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "requirements": {
              "description": "This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.",
              "type": "string"
            },
            "_requirements": {
              "description": "Extensions for requirements",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "alias": {
              "description": "Identifies additional names by which this element might also be known.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "_alias": {
              "description": "Extensions for alias",
              "type": "array",
              "items": {
                "$ref": "Element.schema.json#/definitions/Element"
              }
            },
            "min": {
              "description": "The minimum number of times this element SHALL appear in the instance.",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "_min": {
              "description": "Extensions for min",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "max": {
              "description": "The maximum number of times this element is permitted to appear in the instance.",
              "type": "string"
            },
            "_max": {
              "description": "Extensions for max",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "base": {
              "description": "Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is provided when the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot.",
              "$ref": "#/definitions/ElementDefinition_Base"
            },
            "contentReference": {
              "description": "Identifies the identity of an element defined elsewhere in the profile whose content rules should be applied to the current element.",
              "type": "string"
            },
            "_contentReference": {
              "description": "Extensions for contentReference",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "type": {
              "description": "The data type or resource that the value of this element is permitted to be.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementDefinition_Type"
              }
            },
            "defaultValueBoolean": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "type": "boolean"
            },
            "_defaultValueBoolean": {
              "description": "Extensions for defaultValueBoolean",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueInteger": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "_defaultValueInteger": {
              "description": "Extensions for defaultValueInteger",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueDecimal": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "_defaultValueDecimal": {
              "description": "Extensions for defaultValueDecimal",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueBase64Binary": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "type": "string"
            },
            "_defaultValueBase64Binary": {
              "description": "Extensions for defaultValueBase64Binary",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueInstant": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "type": "string"
            },
            "_defaultValueInstant": {
              "description": "Extensions for defaultValueInstant",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueString": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "type": "string"
            },
            "_defaultValueString": {
              "description": "Extensions for defaultValueString",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueUri": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "type": "string"
            },
            "_defaultValueUri": {
              "description": "Extensions for defaultValueUri",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueDate": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "_defaultValueDate": {
              "description": "Extensions for defaultValueDate",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueDateTime": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "-?([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "_defaultValueDateTime": {
              "description": "Extensions for defaultValueDateTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueTime": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "_defaultValueTime": {
              "description": "Extensions for defaultValueTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueCode": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "_defaultValueCode": {
              "description": "Extensions for defaultValueCode",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueOid": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "_defaultValueOid": {
              "description": "Extensions for defaultValueOid",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueUuid": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "_defaultValueUuid": {
              "description": "Extensions for defaultValueUuid",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueId": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "_defaultValueId": {
              "description": "Extensions for defaultValueId",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueUnsignedInt": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "_defaultValueUnsignedInt": {
              "description": "Extensions for defaultValueUnsignedInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValuePositiveInt": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "_defaultValuePositiveInt": {
              "description": "Extensions for defaultValuePositiveInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueMarkdown": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "type": "string"
            },
            "_defaultValueMarkdown": {
              "description": "Extensions for defaultValueMarkdown",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueElement": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "defaultValueElementDefinition": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/ElementDefinition"
            },
            "defaultValueExtension": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Extension.schema.json#/definitions/Extension"
            },
            "defaultValueBackboneElement": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
            },
            "defaultValueNarrative": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Narrative.schema.json#/definitions/Narrative"
            },
            "defaultValueAnnotation": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Annotation.schema.json#/definitions/Annotation"
            },
            "defaultValueAttachment": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Attachment.schema.json#/definitions/Attachment"
            },
            "defaultValueIdentifier": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Identifier.schema.json#/definitions/Identifier"
            },
            "defaultValueCodeableConcept": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
            },
            "defaultValueCoding": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Coding.schema.json#/definitions/Coding"
            },
            "defaultValueQuantity": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "defaultValueDuration": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Duration.schema.json#/definitions/Duration"
            },
            "defaultValueSimpleQuantity": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "defaultValueDistance": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Distance.schema.json#/definitions/Distance"
            },
            "defaultValueCount": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Count.schema.json#/definitions/Count"
            },
            "defaultValueMoney": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Money.schema.json#/definitions/Money"
            },
            "defaultValueAge": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Age.schema.json#/definitions/Age"
            },
            "defaultValueRange": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Range.schema.json#/definitions/Range"
            },
            "defaultValuePeriod": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Period.schema.json#/definitions/Period"
            },
            "defaultValueRatio": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Ratio.schema.json#/definitions/Ratio"
            },
            "defaultValueReference": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Reference.schema.json#/definitions/Reference"
            },
            "defaultValueSampledData": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "SampledData.schema.json#/definitions/SampledData"
            },
            "defaultValueSignature": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Signature.schema.json#/definitions/Signature"
            },
            "defaultValueHumanName": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "HumanName.schema.json#/definitions/HumanName"
            },
            "defaultValueAddress": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Address.schema.json#/definitions/Address"
            },
            "defaultValueContactPoint": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "ContactPoint.schema.json#/definitions/ContactPoint"
            },
            "defaultValueTiming": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Timing.schema.json#/definitions/Timing"
            },
            "defaultValueMeta": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Meta.schema.json#/definitions/Meta"
            },
            "defaultValueContactDetail": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "ContactDetail.schema.json#/definitions/ContactDetail"
            },
            "defaultValueContributor": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Contributor.schema.json#/definitions/Contributor"
            },
            "defaultValueDosage": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "Dosage.schema.json#/definitions/Dosage"
            },
            "defaultValueRelatedArtifact": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "RelatedArtifact.schema.json#/definitions/RelatedArtifact"
            },
            "defaultValueUsageContext": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "UsageContext.schema.json#/definitions/UsageContext"
            },
            "defaultValueDataRequirement": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "DataRequirement.schema.json#/definitions/DataRequirement"
            },
            "defaultValueParameterDefinition": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "ParameterDefinition.schema.json#/definitions/ParameterDefinition"
            },
            "defaultValueTriggerDefinition": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "TriggerDefinition.schema.json#/definitions/TriggerDefinition"
            },
            "meaningWhenMissing": {
              "description": "The Implicit meaning that is to be understood when this element is missing (e.g. \u0027when this element is missing, the period is ongoing\u0027.",
              "type": "string"
            },
            "_meaningWhenMissing": {
              "description": "Extensions for meaningWhenMissing",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "orderMeaning": {
              "description": "If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.",
              "type": "string"
            },
            "_orderMeaning": {
              "description": "Extensions for orderMeaning",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedBoolean": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "type": "boolean"
            },
            "_fixedBoolean": {
              "description": "Extensions for fixedBoolean",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedInteger": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "_fixedInteger": {
              "description": "Extensions for fixedInteger",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedDecimal": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "_fixedDecimal": {
              "description": "Extensions for fixedDecimal",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedBase64Binary": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "type": "string"
            },
            "_fixedBase64Binary": {
              "description": "Extensions for fixedBase64Binary",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedInstant": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "type": "string"
            },
            "_fixedInstant": {
              "description": "Extensions for fixedInstant",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedString": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "type": "string"
            },
            "_fixedString": {
              "description": "Extensions for fixedString",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedUri": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "type": "string"
            },
            "_fixedUri": {
              "description": "Extensions for fixedUri",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedDate": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "_fixedDate": {
              "description": "Extensions for fixedDate",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedDateTime": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "-?([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "_fixedDateTime": {
              "description": "Extensions for fixedDateTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedTime": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "_fixedTime": {
              "description": "Extensions for fixedTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedCode": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "_fixedCode": {
              "description": "Extensions for fixedCode",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedOid": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "_fixedOid": {
              "description": "Extensions for fixedOid",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedUuid": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "_fixedUuid": {
              "description": "Extensions for fixedUuid",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedId": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "_fixedId": {
              "description": "Extensions for fixedId",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedUnsignedInt": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "_fixedUnsignedInt": {
              "description": "Extensions for fixedUnsignedInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedPositiveInt": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "_fixedPositiveInt": {
              "description": "Extensions for fixedPositiveInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedMarkdown": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "type": "string"
            },
            "_fixedMarkdown": {
              "description": "Extensions for fixedMarkdown",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedElement": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "fixedExtension": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Extension.schema.json#/definitions/Extension"
            },
            "fixedBackboneElement": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
            },
            "fixedNarrative": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Narrative.schema.json#/definitions/Narrative"
            },
            "fixedAnnotation": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Annotation.schema.json#/definitions/Annotation"
            },
            "fixedAttachment": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Attachment.schema.json#/definitions/Attachment"
            },
            "fixedIdentifier": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Identifier.schema.json#/definitions/Identifier"
            },
            "fixedCodeableConcept": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
            },
            "fixedCoding": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Coding.schema.json#/definitions/Coding"
            },
            "fixedQuantity": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "fixedDuration": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Duration.schema.json#/definitions/Duration"
            },
            "fixedSimpleQuantity": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "fixedDistance": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Distance.schema.json#/definitions/Distance"
            },
            "fixedCount": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Count.schema.json#/definitions/Count"
            },
            "fixedMoney": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Money.schema.json#/definitions/Money"
            },
            "fixedAge": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Age.schema.json#/definitions/Age"
            },
            "fixedRange": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Range.schema.json#/definitions/Range"
            },
            "fixedPeriod": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Period.schema.json#/definitions/Period"
            },
            "fixedRatio": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Ratio.schema.json#/definitions/Ratio"
            },
            "fixedReference": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Reference.schema.json#/definitions/Reference"
            },
            "fixedSampledData": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "SampledData.schema.json#/definitions/SampledData"
            },
            "fixedSignature": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Signature.schema.json#/definitions/Signature"
            },
            "fixedHumanName": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "HumanName.schema.json#/definitions/HumanName"
            },
            "fixedAddress": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Address.schema.json#/definitions/Address"
            },
            "fixedContactPoint": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "ContactPoint.schema.json#/definitions/ContactPoint"
            },
            "fixedTiming": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Timing.schema.json#/definitions/Timing"
            },
            "fixedMeta": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Meta.schema.json#/definitions/Meta"
            },
            "fixedElementDefinition": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/ElementDefinition"
            },
            "fixedContactDetail": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "ContactDetail.schema.json#/definitions/ContactDetail"
            },
            "fixedContributor": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Contributor.schema.json#/definitions/Contributor"
            },
            "fixedDosage": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "Dosage.schema.json#/definitions/Dosage"
            },
            "fixedRelatedArtifact": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "RelatedArtifact.schema.json#/definitions/RelatedArtifact"
            },
            "fixedUsageContext": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "UsageContext.schema.json#/definitions/UsageContext"
            },
            "fixedDataRequirement": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "DataRequirement.schema.json#/definitions/DataRequirement"
            },
            "fixedParameterDefinition": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "ParameterDefinition.schema.json#/definitions/ParameterDefinition"
            },
            "fixedTriggerDefinition": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "TriggerDefinition.schema.json#/definitions/TriggerDefinition"
            },
            "patternBoolean": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "type": "boolean"
            },
            "_patternBoolean": {
              "description": "Extensions for patternBoolean",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternInteger": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "_patternInteger": {
              "description": "Extensions for patternInteger",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternDecimal": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "_patternDecimal": {
              "description": "Extensions for patternDecimal",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternBase64Binary": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "type": "string"
            },
            "_patternBase64Binary": {
              "description": "Extensions for patternBase64Binary",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternInstant": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "type": "string"
            },
            "_patternInstant": {
              "description": "Extensions for patternInstant",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternString": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "type": "string"
            },
            "_patternString": {
              "description": "Extensions for patternString",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternUri": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "type": "string"
            },
            "_patternUri": {
              "description": "Extensions for patternUri",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternDate": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "_patternDate": {
              "description": "Extensions for patternDate",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternDateTime": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "-?([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "_patternDateTime": {
              "description": "Extensions for patternDateTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternTime": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "_patternTime": {
              "description": "Extensions for patternTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternCode": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "_patternCode": {
              "description": "Extensions for patternCode",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternOid": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "_patternOid": {
              "description": "Extensions for patternOid",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternUuid": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "_patternUuid": {
              "description": "Extensions for patternUuid",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternId": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "_patternId": {
              "description": "Extensions for patternId",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternUnsignedInt": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "_patternUnsignedInt": {
              "description": "Extensions for patternUnsignedInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternPositiveInt": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "_patternPositiveInt": {
              "description": "Extensions for patternPositiveInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternMarkdown": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "type": "string"
            },
            "_patternMarkdown": {
              "description": "Extensions for patternMarkdown",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternElement": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "patternExtension": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Extension.schema.json#/definitions/Extension"
            },
            "patternBackboneElement": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
            },
            "patternNarrative": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Narrative.schema.json#/definitions/Narrative"
            },
            "patternAnnotation": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Annotation.schema.json#/definitions/Annotation"
            },
            "patternAttachment": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Attachment.schema.json#/definitions/Attachment"
            },
            "patternIdentifier": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Identifier.schema.json#/definitions/Identifier"
            },
            "patternCodeableConcept": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
            },
            "patternCoding": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Coding.schema.json#/definitions/Coding"
            },
            "patternQuantity": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "patternDuration": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Duration.schema.json#/definitions/Duration"
            },
            "patternSimpleQuantity": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "patternDistance": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Distance.schema.json#/definitions/Distance"
            },
            "patternCount": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Count.schema.json#/definitions/Count"
            },
            "patternMoney": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Money.schema.json#/definitions/Money"
            },
            "patternAge": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Age.schema.json#/definitions/Age"
            },
            "patternRange": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Range.schema.json#/definitions/Range"
            },
            "patternPeriod": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Period.schema.json#/definitions/Period"
            },
            "patternRatio": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Ratio.schema.json#/definitions/Ratio"
            },
            "patternReference": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Reference.schema.json#/definitions/Reference"
            },
            "patternSampledData": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "SampledData.schema.json#/definitions/SampledData"
            },
            "patternSignature": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Signature.schema.json#/definitions/Signature"
            },
            "patternHumanName": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "HumanName.schema.json#/definitions/HumanName"
            },
            "patternAddress": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Address.schema.json#/definitions/Address"
            },
            "patternContactPoint": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "ContactPoint.schema.json#/definitions/ContactPoint"
            },
            "patternTiming": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Timing.schema.json#/definitions/Timing"
            },
            "patternMeta": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Meta.schema.json#/definitions/Meta"
            },
            "patternElementDefinition": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/ElementDefinition"
            },
            "patternContactDetail": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "ContactDetail.schema.json#/definitions/ContactDetail"
            },
            "patternContributor": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Contributor.schema.json#/definitions/Contributor"
            },
            "patternDosage": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "Dosage.schema.json#/definitions/Dosage"
            },
            "patternRelatedArtifact": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "RelatedArtifact.schema.json#/definitions/RelatedArtifact"
            },
            "patternUsageContext": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "UsageContext.schema.json#/definitions/UsageContext"
            },
            "patternDataRequirement": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "DataRequirement.schema.json#/definitions/DataRequirement"
            },
            "patternParameterDefinition": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "ParameterDefinition.schema.json#/definitions/ParameterDefinition"
            },
            "patternTriggerDefinition": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "TriggerDefinition.schema.json#/definitions/TriggerDefinition"
            },
            "example": {
              "description": "A sample value for this element demonstrating the type of information that would typically be found in the element.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementDefinition_Example"
              }
            },
            "minValueDate": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "_minValueDate": {
              "description": "Extensions for minValueDate",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "minValueDateTime": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "_minValueDateTime": {
              "description": "Extensions for minValueDateTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "minValueInstant": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "string"
            },
            "_minValueInstant": {
              "description": "Extensions for minValueInstant",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "minValueTime": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "_minValueTime": {
              "description": "Extensions for minValueTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "minValueDecimal": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "_minValueDecimal": {
              "description": "Extensions for minValueDecimal",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "minValueInteger": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "_minValueInteger": {
              "description": "Extensions for minValueInteger",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "minValuePositiveInt": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "_minValuePositiveInt": {
              "description": "Extensions for minValuePositiveInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "minValueUnsignedInt": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "_minValueUnsignedInt": {
              "description": "Extensions for minValueUnsignedInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "minValueQuantity": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "maxValueDate": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "_maxValueDate": {
              "description": "Extensions for maxValueDate",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "maxValueDateTime": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "_maxValueDateTime": {
              "description": "Extensions for maxValueDateTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "maxValueInstant": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "string"
            },
            "_maxValueInstant": {
              "description": "Extensions for maxValueInstant",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "maxValueTime": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "_maxValueTime": {
              "description": "Extensions for maxValueTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "maxValueDecimal": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "_maxValueDecimal": {
              "description": "Extensions for maxValueDecimal",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "maxValueInteger": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "_maxValueInteger": {
              "description": "Extensions for maxValueInteger",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "maxValuePositiveInt": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "_maxValuePositiveInt": {
              "description": "Extensions for maxValuePositiveInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "maxValueUnsignedInt": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "_maxValueUnsignedInt": {
              "description": "Extensions for maxValueUnsignedInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "maxValueQuantity": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "maxLength": {
              "description": "Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "_maxLength": {
              "description": "Extensions for maxLength",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "condition": {
              "description": "A reference to an invariant that may make additional statements about the cardinality or value in the instance.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
              }
            },
            "_condition": {
              "description": "Extensions for condition",
              "type": "array",
              "items": {
                "$ref": "Element.schema.json#/definitions/Element"
              }
            },
            "constraint": {
              "description": "Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementDefinition_Constraint"
              }
            },
            "mustSupport": {
              "description": "If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way.  If false, the element may be ignored and not supported.",
              "type": "boolean"
            },
            "_mustSupport": {
              "description": "Extensions for mustSupport",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "isModifier": {
              "description": "If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.",
              "type": "boolean"
            },
            "_isModifier": {
              "description": "Extensions for isModifier",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "isSummary": {
              "description": "Whether the element should be included if a client requests a search with the parameter _summary\u003dtrue.",
              "type": "boolean"
            },
            "_isSummary": {
              "description": "Extensions for isSummary",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "binding": {
              "description": "Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).",
              "$ref": "#/definitions/ElementDefinition_Binding"
            },
            "mapping": {
              "description": "Identifies a concept from an external specification that roughly corresponds to this element.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementDefinition_Mapping"
              }
            }
          }
        }
      ]
    },
    "ElementDefinition_Slicing": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "discriminator": {
              "description": "Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementDefinition_Discriminator"
              }
            },
            "description": {
              "description": "A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.",
              "type": "string"
            },
            "_description": {
              "description": "Extensions for description",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "ordered": {
              "description": "If the matching elements have to occur in the same order as defined in the profile.",
              "type": "boolean"
            },
            "_ordered": {
              "description": "Extensions for ordered",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "rules": {
              "description": "Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.",
              "enum": [
                "closed",
                "open",
                "openAtEnd"
              ],
              "type": "string"
            },
            "_rules": {
              "description": "Extensions for rules",
              "$ref": "Element.schema.json#/definitions/Element"
            }
          }
        }
      ]
    },
    "ElementDefinition_Discriminator": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "type": {
              "description": "How the element value is interpreted when discrimination is evaluated.",
              "enum": [
                "value",
                "exists",
                "pattern",
                "type",
                "profile"
              ],
              "type": "string"
            },
            "_type": {
              "description": "Extensions for type",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "path": {
              "description": "A FHIRPath expression, using a restricted subset of FHIRPath, that is used to identify the element on which discrimination is based.",
              "type": "string"
            },
            "_path": {
              "description": "Extensions for path",
              "$ref": "Element.schema.json#/definitions/Element"
            }
          }
        }
      ]
    },
    "ElementDefinition_Base": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "path": {
              "description": "The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [[[StructureDefinition]]] without a StructureDefinition.base.",
              "type": "string"
            },
            "_path": {
              "description": "Extensions for path",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "min": {
              "description": "Minimum cardinality of the base element identified by the path.",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "_min": {
              "description": "Extensions for min",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "max": {
              "description": "Maximum cardinality of the base element identified by the path.",
              "type": "string"
            },
            "_max": {
              "description": "Extensions for max",
              "$ref": "Element.schema.json#/definitions/Element"
            }
          }
        }
      ]
    },
    "ElementDefinition_Type": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "code": {
              "description": "URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.",
              "type": "string"
            },
            "_code": {
              "description": "Extensions for code",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "profile": {
              "description": "Identifies a profile structure or implementation Guide that SHALL hold for the datatype this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.",
              "type": "string"
            },
            "_profile": {
              "description": "Extensions for profile",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "targetProfile": {
              "description": "Identifies a profile structure or implementation Guide that SHALL hold for the target of the reference this element refers to. Can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.",
              "type": "string"
            },
            "_targetProfile": {
              "description": "Extensions for targetProfile",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "aggregation": {
              "description": "If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.",
              "enum": [
                "contained",
                "referenced",
                "bundled"
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "_aggregation": {
              "description": "Extensions for aggregation",
              "type": "array",
              "items": {
                "$ref": "Element.schema.json#/definitions/Element"
              }
            },
            "versioning": {
              "description": "Whether this reference needs to be version specific or version independent, or whether either can be used.",
              "enum": [
                "either",
                "independent",
                "specific"
              ],
              "type": "string"
            },
            "_versioning": {
              "description": "Extensions for versioning",
              "$ref": "Element.schema.json#/definitions/Element"
            }
          }
        }
      ]
    },
    "ElementDefinition_Example": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "label": {
              "description": "Describes the purpose of this example amoung the set of examples.",
              "type": "string"
            },
            "_label": {
              "description": "Extensions for label",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueBoolean": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "type": "boolean"
            },
            "_valueBoolean": {
              "description": "Extensions for valueBoolean",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueInteger": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "_valueInteger": {
              "description": "Extensions for valueInteger",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueDecimal": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "_valueDecimal": {
              "description": "Extensions for valueDecimal",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueBase64Binary": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "type": "string"
            },
            "_valueBase64Binary": {
              "description": "Extensions for valueBase64Binary",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueInstant": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "type": "string"
            },
            "_valueInstant": {
              "description": "Extensions for valueInstant",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueString": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "type": "string"
            },
            "_valueString": {
              "description": "Extensions for valueString",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueUri": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "type": "string"
            },
            "_valueUri": {
              "description": "Extensions for valueUri",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueDate": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "_valueDate": {
              "description": "Extensions for valueDate",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueDateTime": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "pattern": "-?([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "_valueDateTime": {
              "description": "Extensions for valueDateTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueTime": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "_valueTime": {
              "description": "Extensions for valueTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueCode": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "_valueCode": {
              "description": "Extensions for valueCode",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueOid": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "_valueOid": {
              "description": "Extensions for valueOid",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueUuid": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "_valueUuid": {
              "description": "Extensions for valueUuid",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueId": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "_valueId": {
              "description": "Extensions for valueId",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueUnsignedInt": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "_valueUnsignedInt": {
              "description": "Extensions for valueUnsignedInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valuePositiveInt": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "_valuePositiveInt": {
              "description": "Extensions for valuePositiveInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueMarkdown": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "type": "string"
            },
            "_valueMarkdown": {
              "description": "Extensions for valueMarkdown",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueElement": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueExtension": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Extension.schema.json#/definitions/Extension"
            },
            "valueBackboneElement": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
            },
            "valueNarrative": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Narrative.schema.json#/definitions/Narrative"
            },
            "valueAnnotation": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Annotation.schema.json#/definitions/Annotation"
            },
            "valueAttachment": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Attachment.schema.json#/definitions/Attachment"
            },
            "valueIdentifier": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Identifier.schema.json#/definitions/Identifier"
            },
            "valueCodeableConcept": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
            },
            "valueCoding": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Coding.schema.json#/definitions/Coding"
            },
            "valueQuantity": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "valueDuration": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Duration.schema.json#/definitions/Duration"
            },
            "valueSimpleQuantity": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "valueDistance": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Distance.schema.json#/definitions/Distance"
            },
            "valueCount": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Count.schema.json#/definitions/Count"
            },
            "valueMoney": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Money.schema.json#/definitions/Money"
            },
            "valueAge": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Age.schema.json#/definitions/Age"
            },
            "valueRange": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Range.schema.json#/definitions/Range"
            },
            "valuePeriod": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Period.schema.json#/definitions/Period"
            },
            "valueRatio": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Ratio.schema.json#/definitions/Ratio"
            },
            "valueReference": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Reference.schema.json#/definitions/Reference"
            },
            "valueSampledData": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "SampledData.schema.json#/definitions/SampledData"
            },
            "valueSignature": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Signature.schema.json#/definitions/Signature"
            },
            "valueHumanName": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "HumanName.schema.json#/definitions/HumanName"
            },
            "valueAddress": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Address.schema.json#/definitions/Address"
            },
            "valueContactPoint": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "ContactPoint.schema.json#/definitions/ContactPoint"
            },
            "valueTiming": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Timing.schema.json#/definitions/Timing"
            },
            "valueMeta": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Meta.schema.json#/definitions/Meta"
            },
            "valueElementDefinition": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "#/definitions/ElementDefinition"
            },
            "valueContactDetail": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "ContactDetail.schema.json#/definitions/ContactDetail"
            },
            "valueContributor": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Contributor.schema.json#/definitions/Contributor"
            },
            "valueDosage": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "Dosage.schema.json#/definitions/Dosage"
            },
            "valueRelatedArtifact": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "RelatedArtifact.schema.json#/definitions/RelatedArtifact"
            },
            "valueUsageContext": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "UsageContext.schema.json#/definitions/UsageContext"
            },
            "valueDataRequirement": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "DataRequirement.schema.json#/definitions/DataRequirement"
            },
            "valueParameterDefinition": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "ParameterDefinition.schema.json#/definitions/ParameterDefinition"
            },
            "valueTriggerDefinition": {
              "description": "The actual value for the element, which must be one of the types allowed for this element.",
              "$ref": "TriggerDefinition.schema.json#/definitions/TriggerDefinition"
            }
          }
        }
      ]
    },
    "ElementDefinition_Constraint": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "key": {
              "description": "Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "_key": {
              "description": "Extensions for key",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "requirements": {
              "description": "Description of why this constraint is necessary or appropriate.",
              "type": "string"
            },
            "_requirements": {
              "description": "Extensions for requirements",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "severity": {
              "description": "Identifies the impact constraint violation has on the conformance of the instance.",
              "enum": [
                "error",
                "warning"
              ],
              "type": "string"
            },
            "_severity": {
              "description": "Extensions for severity",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "human": {
              "description": "Text that can be used to describe the constraint in messages identifying that the constraint has been violated.",
              "type": "string"
            },
            "_human": {
              "description": "Extensions for human",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "expression": {
              "description": "A [FHIRPath](http://hl7.org/fluentpath) expression of constraint that can be executed to see if this constraint is met.",
              "type": "string"
            },
            "_expression": {
              "description": "Extensions for expression",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "xpath": {
              "description": "An XPath expression of constraint that can be executed to see if this constraint is met.",
              "type": "string"
            },
            "_xpath": {
              "description": "Extensions for xpath",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "source": {
              "description": "A reference to the original source of the constraint, for traceability purposes.",
              "type": "string"
            },
            "_source": {
              "description": "Extensions for source",
              "$ref": "Element.schema.json#/definitions/Element"
            }
          }
        }
      ]
    },
    "ElementDefinition_Binding": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "strength": {
              "description": "Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.",
              "enum": [
                "required",
                "extensible",
                "preferred",
                "example"
              ],
              "type": "string"
            },
            "_strength": {
              "description": "Extensions for strength",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "description": {
              "description": "Describes the intended use of this particular set of codes.",
              "type": "string"
            },
            "_description": {
              "description": "Extensions for description",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueSetUri": {
              "description": "Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used. If the binding refers to an explicit value set - the normal case - then use a Reference(ValueSet) preferably containing the canonical URL for the value set. If the reference is to an implicit value set - usually, an IETF RFC that defines a grammar, such as mime types - then use a uri.",
              "type": "string"
            },
            "_valueSetUri": {
              "description": "Extensions for valueSetUri",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueSetReference": {
              "description": "Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used. If the binding refers to an explicit value set - the normal case - then use a Reference(ValueSet) preferably containing the canonical URL for the value set. If the reference is to an implicit value set - usually, an IETF RFC that defines a grammar, such as mime types - then use a uri.",
              "$ref": "Reference.schema.json#/definitions/Reference"
            }
          }
        }
      ]
    },
    "ElementDefinition_Mapping": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "identity": {
              "description": "An internal reference to the definition of a mapping.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "_identity": {
              "description": "Extensions for identity",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "language": {
              "description": "Identifies the computable language in which mapping.map is expressed.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "_language": {
              "description": "Extensions for language",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "map": {
              "description": "Expresses what part of the target specification corresponds to this element.",
              "type": "string"
            },
            "_map": {
              "description": "Extensions for map",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "comment": {
              "description": "Comments that provide information about the mapping or its use.",
              "type": "string"
            },
            "_comment": {
              "description": "Extensions for comment",
              "$ref": "Element.schema.json#/definitions/Element"
            }
          }
        }
      ]
    }

,    "Task": {
      "allOf": [
        {
          "$ref": "DomainResource.schema.json#/definitions/DomainResource"
        },
        {
          "description": "A task to be performed.",
          "properties": {
            "resourceType": {
              "description": "This is a Task resource",
              "type": "string",
              "enum": [
                "Task"
              ]
            },
            "identifier": {
              "description": "The business identifier for this task.",
              "type": "array",
              "items": {
                "$ref": "Identifier.schema.json#/definitions/Identifier"
              }
            },
            "definitionUri": {
              "description": "A reference to a formal or informal definition of the task.  For example, a protocol, a step within a defined workflow definition, etc.",
              "type": "string"
            },
            "_definitionUri": {
              "description": "Extensions for definitionUri",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "definitionReference": {
              "description": "A reference to a formal or informal definition of the task.  For example, a protocol, a step within a defined workflow definition, etc.",
              "$ref": "Reference.schema.json#/definitions/Reference"
            },
            "basedOn": {
              "description": "BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a \"request\" resource such as a ProcedureRequest, MedicationRequest, ProcedureRequest, CarePlan, etc. which is distinct from the \"request\" resource the task is seeking to fulfil.  This latter resource is referenced by FocusOn.  For example, based on a ProcedureRequest (\u003d BasedOn), a task is created to fulfil a procedureRequest ( \u003d FocusOn ) to collect a specimen from a patient.",
              "type": "array",
              "items": {
                "$ref": "Reference.schema.json#/definitions/Reference"
              }
            },
            "groupIdentifier": {
              "description": "An identifier that links together multiple tasks and other requests that were created in the same context.",
              "$ref": "Identifier.schema.json#/definitions/Identifier"
            },
            "partOf": {
              "description": "Task that this particular task is part of.",
              "type": "array",
              "items": {
                "$ref": "Reference.schema.json#/definitions/Reference"
              }
            },
            "status": {
              "description": "The current status of the task.",
              "enum": [
                "draft",
                "requested",
                "received",
                "accepted",
                "rejected",
                "ready",
                "cancelled",
                "in-progress",
                "on-hold",
                "failed",
                "completed",
                "entered-in-error"
              ],
              "type": "string"
            },
            "_status": {
              "description": "Extensions for status",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "statusReason": {
              "description": "An explanation as to why this task is held, failed, was refused, etc.",
              "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
            },
            "businessStatus": {
              "description": "Contains business-specific nuances of the business state.",
              "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
            },
            "intent": {
              "description": "Indicates the \"level\" of actionability associated with the Task.  I.e. Is this a proposed task, a planned task, an actionable task, etc.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "_intent": {
              "description": "Extensions for intent",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "priority": {
              "description": "Indicates how quickly the Task should be addressed with respect to other requests.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "_priority": {
              "description": "Extensions for priority",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "code": {
              "description": "A name or code (or both) briefly describing what the task involves.",
              "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
            },
            "description": {
              "description": "A free-text description of what is to be performed.",
              "type": "string"
            },
            "_description": {
              "description": "Extensions for description",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "focus": {
              "description": "The request being actioned or the resource being manipulated by this task.",
              "$ref": "Reference.schema.json#/definitions/Reference"
            },
            "for": {
              "description": "The entity who benefits from the performance of the service specified in the task (e.g., the patient).",
              "$ref": "Reference.schema.json#/definitions/Reference"
            },
            "context": {
              "description": "The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.",
              "$ref": "Reference.schema.json#/definitions/Reference"
            },
            "executionPeriod": {
              "description": "Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).",
              "$ref": "Period.schema.json#/definitions/Period"
            },
            "authoredOn": {
              "description": "The date and time this task was created.",
              "type": "string",
              "pattern": "-?([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "_authoredOn": {
              "description": "Extensions for authoredOn",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "lastModified": {
              "description": "The date and time of last modification to this task.",
              "type": "string",
              "pattern": "-?([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "_lastModified": {
              "description": "Extensions for lastModified",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "requester": {
              "description": "The creator of the task.",
              "$ref": "#/definitions/Task_Requester"
            },
            "performerType": {
              "description": "The type of participant that can execute the task.",
              "type": "array",
              "items": {
                "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
              }
            },
            "owner": {
              "description": "Individual organization or Device currently responsible for task execution.",
              "$ref": "Reference.schema.json#/definitions/Reference"
            },
            "reason": {
              "description": "A description or code indicating why this task needs to be performed.",
              "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
            },
            "note": {
              "description": "Free-text information captured about the task as it progresses.",
              "type": "array",
              "items": {
                "$ref": "Annotation.schema.json#/definitions/Annotation"
              }
            },
            "relevantHistory": {
              "description": "Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.",
              "type": "array",
              "items": {
                "$ref": "Reference.schema.json#/definitions/Reference"
              }
            },
            "restriction": {
              "description": "If the Task.focus is a request resource and the task is seeking fulfillment (i.e is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.",
              "$ref": "#/definitions/Task_Restriction"
            },
            "input": {
              "description": "Additional information that may be needed in the execution of the task.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task_Input"
              }
            },
            "output": {
              "description": "Outputs produced by the Task.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task_Output"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Task_Requester": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
        },
        {
          "description": "A task to be performed.",
          "properties": {
            "agent": {
              "description": "The device, practitioner, etc. who initiated the task.",
              "$ref": "Reference.schema.json#/definitions/Reference"
            },
            "onBehalfOf": {
              "description": "The organization the device or practitioner was acting on behalf of when they initiated the task.",
              "$ref": "Reference.schema.json#/definitions/Reference"
            }
          },
          "required": [
            "agent"
          ]
        }
      ]
    },
    "Task_Restriction": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
        },
        {
          "description": "A task to be performed.",
          "properties": {
            "repetitions": {
              "description": "Indicates the number of times the requested action should occur.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "_repetitions": {
              "description": "Extensions for repetitions",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "period": {
              "description": "Over what time-period is fulfillment sought.",
              "$ref": "Period.schema.json#/definitions/Period"
            },
            "recipient": {
              "description": "For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?",
              "type": "array",
              "items": {
                "$ref": "Reference.schema.json#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "Task_Input": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
        },
        {
          "description": "A task to be performed.",
          "properties": {
            "type": {
              "description": "A code or description indicating how the input is intended to be used as part of the task execution.",
              "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
            },
            "valueBoolean": {
              "description": "The value of the input parameter as a basic type.",
              "type": "boolean"
            },
            "_valueBoolean": {
              "description": "Extensions for valueBoolean",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueInteger": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "_valueInteger": {
              "description": "Extensions for valueInteger",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueDecimal": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "_valueDecimal": {
              "description": "Extensions for valueDecimal",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueBase64Binary": {
              "description": "The value of the input parameter as a basic type.",
              "type": "string"
            },
            "_valueBase64Binary": {
              "description": "Extensions for valueBase64Binary",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueInstant": {
              "description": "The value of the input parameter as a basic type.",
              "type": "string"
            },
            "_valueInstant": {
              "description": "Extensions for valueInstant",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueString": {
              "description": "The value of the input parameter as a basic type.",
              "type": "string"
            },
            "_valueString": {
              "description": "Extensions for valueString",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueUri": {
              "description": "The value of the input parameter as a basic type.",
              "type": "string"
            },
            "_valueUri": {
              "description": "Extensions for valueUri",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueDate": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "_valueDate": {
              "description": "Extensions for valueDate",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueDateTime": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "-?([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "_valueDateTime": {
              "description": "Extensions for valueDateTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueTime": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "_valueTime": {
              "description": "Extensions for valueTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueCode": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "_valueCode": {
              "description": "Extensions for valueCode",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueOid": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "_valueOid": {
              "description": "Extensions for valueOid",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueUuid": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "_valueUuid": {
              "description": "Extensions for valueUuid",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueId": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "_valueId": {
              "description": "Extensions for valueId",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueUnsignedInt": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "_valueUnsignedInt": {
              "description": "Extensions for valueUnsignedInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valuePositiveInt": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "_valuePositiveInt": {
              "description": "Extensions for valuePositiveInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueMarkdown": {
              "description": "The value of the input parameter as a basic type.",
              "type": "string"
            },
            "_valueMarkdown": {
              "description": "Extensions for valueMarkdown",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueElement": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueExtension": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Extension.schema.json#/definitions/Extension"
            },
            "valueBackboneElement": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
            },
            "valueNarrative": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Narrative.schema.json#/definitions/Narrative"
            },
            "valueAnnotation": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Annotation.schema.json#/definitions/Annotation"
            },
            "valueAttachment": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Attachment.schema.json#/definitions/Attachment"
            },
            "valueIdentifier": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Identifier.schema.json#/definitions/Identifier"
            },
            "valueCodeableConcept": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
            },
            "valueCoding": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Coding.schema.json#/definitions/Coding"
            },
            "valueQuantity": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "valueDuration": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Duration.schema.json#/definitions/Duration"
            },
            "valueSimpleQuantity": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "valueDistance": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Distance.schema.json#/definitions/Distance"
            },
            "valueCount": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Count.schema.json#/definitions/Count"
            },
            "valueMoney": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Money.schema.json#/definitions/Money"
            },
            "valueAge": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Age.schema.json#/definitions/Age"
            },
            "valueRange": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Range.schema.json#/definitions/Range"
            },
            "valuePeriod": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Period.schema.json#/definitions/Period"
            },
            "valueRatio": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Ratio.schema.json#/definitions/Ratio"
            },
            "valueReference": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Reference.schema.json#/definitions/Reference"
            },
            "valueSampledData": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "SampledData.schema.json#/definitions/SampledData"
            },
            "valueSignature": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Signature.schema.json#/definitions/Signature"
            },
            "valueHumanName": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "HumanName.schema.json#/definitions/HumanName"
            },
            "valueAddress": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Address.schema.json#/definitions/Address"
            },
            "valueContactPoint": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "ContactPoint.schema.json#/definitions/ContactPoint"
            },
            "valueTiming": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Timing.schema.json#/definitions/Timing"
            },
            "valueMeta": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Meta.schema.json#/definitions/Meta"
            },
            "valueElementDefinition": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "ElementDefinition.schema.json#/definitions/ElementDefinition"
            },
            "valueContactDetail": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "ContactDetail.schema.json#/definitions/ContactDetail"
            },
            "valueContributor": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Contributor.schema.json#/definitions/Contributor"
            },
            "valueDosage": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "Dosage.schema.json#/definitions/Dosage"
            },
            "valueRelatedArtifact": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "RelatedArtifact.schema.json#/definitions/RelatedArtifact"
            },
            "valueUsageContext": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "UsageContext.schema.json#/definitions/UsageContext"
            },
            "valueDataRequirement": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "DataRequirement.schema.json#/definitions/DataRequirement"
            },
            "valueParameterDefinition": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "ParameterDefinition.schema.json#/definitions/ParameterDefinition"
            },
            "valueTriggerDefinition": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "TriggerDefinition.schema.json#/definitions/TriggerDefinition"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "Task_Output": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
        },
        {
          "description": "A task to be performed.",
          "properties": {
            "type": {
              "description": "The name of the Output parameter.",
              "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
            },
            "valueBoolean": {
              "description": "The value of the Output parameter as a basic type.",
              "type": "boolean"
            },
            "_valueBoolean": {
              "description": "Extensions for valueBoolean",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueInteger": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "_valueInteger": {
              "description": "Extensions for valueInteger",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueDecimal": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "_valueDecimal": {
              "description": "Extensions for valueDecimal",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueBase64Binary": {
              "description": "The value of the Output parameter as a basic type.",
              "type": "string"
            },
            "_valueBase64Binary": {
              "description": "Extensions for valueBase64Binary",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueInstant": {
              "description": "The value of the Output parameter as a basic type.",
              "type": "string"
            },
            "_valueInstant": {
              "description": "Extensions for valueInstant",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueString": {
              "description": "The value of the Output parameter as a basic type.",
              "type": "string"
            },
            "_valueString": {
              "description": "Extensions for valueString",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueUri": {
              "description": "The value of the Output parameter as a basic type.",
              "type": "string"
            },
            "_valueUri": {
              "description": "Extensions for valueUri",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueDate": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "_valueDate": {
              "description": "Extensions for valueDate",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueDateTime": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "-?([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "_valueDateTime": {
              "description": "Extensions for valueDateTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueTime": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "_valueTime": {
              "description": "Extensions for valueTime",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueCode": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "_valueCode": {
              "description": "Extensions for valueCode",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueOid": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "_valueOid": {
              "description": "Extensions for valueOid",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueUuid": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "_valueUuid": {
              "description": "Extensions for valueUuid",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueId": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "_valueId": {
              "description": "Extensions for valueId",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueUnsignedInt": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "_valueUnsignedInt": {
              "description": "Extensions for valueUnsignedInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valuePositiveInt": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "_valuePositiveInt": {
              "description": "Extensions for valuePositiveInt",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueMarkdown": {
              "description": "The value of the Output parameter as a basic type.",
              "type": "string"
            },
            "_valueMarkdown": {
              "description": "Extensions for valueMarkdown",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueElement": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Element.schema.json#/definitions/Element"
            },
            "valueExtension": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Extension.schema.json#/definitions/Extension"
            },
            "valueBackboneElement": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "BackboneElement.schema.json#/definitions/BackboneElement"
            },
            "valueNarrative": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Narrative.schema.json#/definitions/Narrative"
            },
            "valueAnnotation": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Annotation.schema.json#/definitions/Annotation"
            },
            "valueAttachment": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Attachment.schema.json#/definitions/Attachment"
            },
            "valueIdentifier": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Identifier.schema.json#/definitions/Identifier"
            },
            "valueCodeableConcept": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
            },
            "valueCoding": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Coding.schema.json#/definitions/Coding"
            },
            "valueQuantity": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "valueDuration": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Duration.schema.json#/definitions/Duration"
            },
            "valueSimpleQuantity": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "valueDistance": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Distance.schema.json#/definitions/Distance"
            },
            "valueCount": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Count.schema.json#/definitions/Count"
            },
            "valueMoney": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Money.schema.json#/definitions/Money"
            },
            "valueAge": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Age.schema.json#/definitions/Age"
            },
            "valueRange": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Range.schema.json#/definitions/Range"
            },
            "valuePeriod": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Period.schema.json#/definitions/Period"
            },
            "valueRatio": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Ratio.schema.json#/definitions/Ratio"
            },
            "valueReference": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Reference.schema.json#/definitions/Reference"
            },
            "valueSampledData": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "SampledData.schema.json#/definitions/SampledData"
            },
            "valueSignature": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Signature.schema.json#/definitions/Signature"
            },
            "valueHumanName": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "HumanName.schema.json#/definitions/HumanName"
            },
            "valueAddress": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Address.schema.json#/definitions/Address"
            },
            "valueContactPoint": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "ContactPoint.schema.json#/definitions/ContactPoint"
            },
            "valueTiming": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Timing.schema.json#/definitions/Timing"
            },
            "valueMeta": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Meta.schema.json#/definitions/Meta"
            },
            "valueElementDefinition": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "ElementDefinition.schema.json#/definitions/ElementDefinition"
            },
            "valueContactDetail": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "ContactDetail.schema.json#/definitions/ContactDetail"
            },
            "valueContributor": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Contributor.schema.json#/definitions/Contributor"
            },
            "valueDosage": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "Dosage.schema.json#/definitions/Dosage"
            },
            "valueRelatedArtifact": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "RelatedArtifact.schema.json#/definitions/RelatedArtifact"
            },
            "valueUsageContext": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "UsageContext.schema.json#/definitions/UsageContext"
            },
            "valueDataRequirement": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "DataRequirement.schema.json#/definitions/DataRequirement"
            },
            "valueParameterDefinition": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "ParameterDefinition.schema.json#/definitions/ParameterDefinition"
            },
            "valueTriggerDefinition": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "TriggerDefinition.schema.json#/definitions/TriggerDefinition"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    }
  }
}