{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://hl7.erp.uno/schema/PackagedProductDefinition.schema.json",
  "$ref": "#/definitions/PackagedProductDefinition",
  "description": "see https://hl7.org/fhir/R5/json.html for information about the FHIR Json Schemas",
  "definitions": {
    "markdown": {
      "pattern": "^^[\\s\\S]+$$",
      "type": "string",
      "description": "A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine"
    },
    "code": {
      "pattern": "^[^\\s]+( [^\\s]+)*$",
      "type": "string",
      "description": "A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents"
    },
    "uri": {
      "pattern": "^\\S*$",
      "type": "string",
      "description": "String of characters used to identify a name or a resource"
    },
    "dateTime": {
      "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]{1,9})?)?)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)?)?)?$",
      "type": "string",
      "description": "A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a UTC offset SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates."
    },
    "PackagedProductDefinition": {
      "description": "A medically related item or items, in a container or package.",
      "properties": {
        "resourceType": {
          "description": "This is a PackagedProductDefinition resource",
          "const": "PackagedProductDefinition"
        },
        "id": {
          "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "type": "string"
        },
        "meta": {
          "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "$ref": "Meta.schema.json#/definitions/Meta"
        },
        "implicitRules": {
          "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "$ref": "#/definitions/uri"
        },
        "_implicitRules": {
          "description": "Extensions for implicitRules",
          "$ref": "Element.schema.json#/definitions/Element"
        },
        "language": {
          "description": "The base language in which the resource is written.",
          "$ref": "#/definitions/code"
        },
        "_language": {
          "description": "Extensions for language",
          "$ref": "Element.schema.json#/definitions/Element"
        },
        "text": {
          "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "$ref": "Narrative.schema.json#/definitions/Narrative"
        },
        "contained": {
          "description": "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.",
          "items": {
            "$ref": "ResourceList.schema.json#/definitions/ResourceList"
          },
          "type": "array"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "Extension.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "Extension.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "A unique identifier for this package as whole - not the the content of the package. Unique instance identifiers assigned to a package by manufacturers, regulators, drug catalogue custodians or other organizations.",
          "items": {
            "$ref": "Identifier.schema.json#/definitions/Identifier"
          },
          "type": "array"
        },
        "name": {
          "description": "A name for this package. Typically what it would be listed as in a drug formulary or catalogue, inventory etc.",
          "type": "string"
        },
        "_name": {
          "description": "Extensions for name",
          "$ref": "Element.schema.json#/definitions/Element"
        },
        "type": {
          "description": "A high level category e.g. medicinal product, raw material, shipping/transport container, etc.",
          "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
        },
        "packageFor": {
          "description": "The product this package model relates to, not the contents of the package (for which see package.containedItem).",
          "items": {
            "$ref": "Reference.schema.json#/definitions/Reference"
          },
          "type": "array"
        },
        "status": {
          "description": "The status within the lifecycle of this item. A high level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization or marketing status.",
          "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
        },
        "statusDate": {
          "description": "The date at which the given status became applicable.",
          "$ref": "#/definitions/dateTime"
        },
        "_statusDate": {
          "description": "Extensions for statusDate",
          "$ref": "Element.schema.json#/definitions/Element"
        },
        "containedItemQuantity": {
          "description": "A total of the complete count of contained items of a particular type/form, independent of sub-packaging or organization. This can be considered as the pack size. This attribute differs from containedItem.amount in that it can give a single aggregated count of all tablet types in a pack, even when these are different manufactured items. For example a pill pack of 21 tablets plus 7 sugar tablets, can be denoted here as \u002728 tablets\u0027. This attribute is repeatable so that the different item types in one pack type can be counted (e.g. a count of vials and count of syringes). Each repeat must have different units, so that it is clear what the different sets of counted items are, and it is not intended to allow different counts of similar items (e.g. not \u00272 tubes and 3 tubes\u0027). Repeats are not to be used to represent different pack sizes (e.g. 20 pack vs. 50 pack) - which would be different instances of this resource.",
          "items": {
            "$ref": "Quantity.schema.json#/definitions/Quantity"
          },
          "type": "array"
        },
        "description": {
          "description": "Textual description. Note that this is not the name of the package or product.",
          "$ref": "#/definitions/markdown"
        },
        "_description": {
          "description": "Extensions for description",
          "$ref": "Element.schema.json#/definitions/Element"
        },
        "legalStatusOfSupply": {
          "description": "The legal status of supply of the packaged item as classified by the regulator.",
          "items": {
            "$ref": "#/definitions/PackagedProductDefinition_LegalStatusOfSupply"
          },
          "type": "array"
        },
        "marketingStatus": {
          "description": "Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated.",
          "items": {
            "$ref": "MarketingStatus.schema.json#/definitions/MarketingStatus"
          },
          "type": "array"
        },
        "copackagedIndicator": {
          "description": "Identifies if the package contains different items, such as when a drug product is supplied with another item e.g. a diluent or adjuvant.",
          "type": "boolean"
        },
        "_copackagedIndicator": {
          "description": "Extensions for copackagedIndicator",
          "$ref": "Element.schema.json#/definitions/Element"
        },
        "manufacturer": {
          "description": "Manufacturer of this package type. When there are multiple it means these are all possible manufacturers.",
          "items": {
            "$ref": "Reference.schema.json#/definitions/Reference"
          },
          "type": "array"
        },
        "attachedDocument": {
          "description": "Additional information or supporting documentation about the packaged product.",
          "items": {
            "$ref": "Reference.schema.json#/definitions/Reference"
          },
          "type": "array"
        },
        "packaging": {
          "description": "A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap (which is not a device or a medication manufactured item).",
          "$ref": "#/definitions/PackagedProductDefinition_Packaging"
        },
        "characteristic": {
          "description": "Allows the key features to be recorded, such as \"hospital pack\", \"nurse prescribable\", \"calendar pack\".",
          "items": {
            "$ref": "#/definitions/PackagedProductDefinition_Property"
          },
          "type": "array"
        }
      },
      "type": "object",
      "additionalProperties": false,
      "required": [
        "resourceType"
      ]
    },
    "PackagedProductDefinition_LegalStatusOfSupply": {
      "description": "A medically related item or items, in a container or package.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "type": "string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "Extension.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "Extension.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "code": {
          "description": "The actual status of supply. Conveys in what situation this package type may be supplied for use.",
          "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
        },
        "jurisdiction": {
          "description": "The place where the legal status of supply applies. When not specified, this indicates it is unknown in this context.",
          "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
        }
      },
      "type": "object",
      "additionalProperties": false
    },
    "PackagedProductDefinition_Packaging": {
      "description": "A medically related item or items, in a container or package.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "type": "string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "Extension.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "Extension.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "identifier": {
          "description": "A business identifier that is specific to this particular part of the packaging, often assigned by the manufacturer. Including possibly Data Carrier Identifier (a GS1 barcode).",
          "items": {
            "$ref": "Identifier.schema.json#/definitions/Identifier"
          },
          "type": "array"
        },
        "type": {
          "description": "The physical type of the container of the items.",
          "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
        },
        "componentPart": {
          "description": "Is this a part of the packaging (e.g. a cap or bottle stopper), rather than the packaging itself (e.g. a bottle or vial). The latter type are designed be a container, but the former are not.",
          "type": "boolean"
        },
        "_componentPart": {
          "description": "Extensions for componentPart",
          "$ref": "Element.schema.json#/definitions/Element"
        },
        "quantity": {
          "description": "The quantity of packaging items contained at this layer of the package. This does not relate to the number of contained items but relates solely to the number of packaging items. When looking at the outermost layer it is always 1. If there are two boxes within, at the next layer it would be 2.",
          "type": "integer"
        },
        "_quantity": {
          "description": "Extensions for quantity",
          "$ref": "Element.schema.json#/definitions/Element"
        },
        "material": {
          "description": "Material type of the package item.",
          "items": {
            "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "alternateMaterial": {
          "description": "A possible alternate material for this part of the packaging, that is allowed to be used instead of the usual material (e.g. different types of plastic for a blister sleeve).",
          "items": {
            "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
          },
          "type": "array"
        },
        "shelfLifeStorage": {
          "description": "Shelf Life and storage information.",
          "items": {
            "$ref": "ProductShelfLife.schema.json#/definitions/ProductShelfLife"
          },
          "type": "array"
        },
        "manufacturer": {
          "description": "Manufacturer of this packaging item. When there are multiple values each one is a potential manufacturer of this packaging item.",
          "items": {
            "$ref": "Reference.schema.json#/definitions/Reference"
          },
          "type": "array"
        },
        "property": {
          "description": "General characteristics of this item.",
          "items": {
            "$ref": "#/definitions/PackagedProductDefinition_Property"
          },
          "type": "array"
        },
        "containedItem": {
          "description": "The item(s) within the packaging.",
          "items": {
            "$ref": "#/definitions/PackagedProductDefinition_ContainedItem"
          },
          "type": "array"
        },
        "packaging": {
          "description": "Allows containers (and parts of containers) within containers, still as a part of a single packaged product. See also PackagedProductDefinition.packaging.containedItem.item(PackagedProductDefinition).",
          "items": {
            "$ref": "#/definitions/PackagedProductDefinition_Packaging"
          },
          "type": "array"
        }
      },
      "type": "object",
      "additionalProperties": false
    },
    "PackagedProductDefinition_Property": {
      "description": "A medically related item or items, in a container or package.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "type": "string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "Extension.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "Extension.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "type": {
          "description": "A code expressing the type of characteristic.",
          "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
        },
        "valueCodeableConcept": {
          "description": "A value for the characteristic.",
          "$ref": "CodeableConcept.schema.json#/definitions/CodeableConcept"
        },
        "valueQuantity": {
          "description": "A value for the characteristic.",
          "$ref": "Quantity.schema.json#/definitions/Quantity"
        },
        "valueDate": {
          "description": "A value for the characteristic.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
          "type": "string"
        },
        "_valueDate": {
          "description": "Extensions for valueDate",
          "$ref": "Element.schema.json#/definitions/Element"
        },
        "valueBoolean": {
          "description": "A value for the characteristic.",
          "pattern": "^true|false$",
          "type": "boolean"
        },
        "_valueBoolean": {
          "description": "Extensions for valueBoolean",
          "$ref": "Element.schema.json#/definitions/Element"
        },
        "valueAttachment": {
          "description": "A value for the characteristic.",
          "$ref": "Attachment.schema.json#/definitions/Attachment"
        }
      },
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ]
    },
    "PackagedProductDefinition_ContainedItem": {
      "description": "A medically related item or items, in a container or package.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "type": "string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "$ref": "Extension.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element\u0027s descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "items": {
            "$ref": "Extension.schema.json#/definitions/Extension"
          },
          "type": "array"
        },
        "item": {
          "description": "The actual item(s) of medication, as manufactured, or a device (typically, but not necessarily, a co-packaged one), or other medically related item (such as food, biologicals, raw materials, medical fluids, gases etc.), as contained in the package. This also allows another whole packaged product to be included, which is solely for the case where a package of other entire packages is wanted - such as a wholesale or distribution pack (for layers within one package, use PackagedProductDefinition.packaging.packaging).",
          "$ref": "CodeableReference.schema.json#/definitions/CodeableReference"
        },
        "amount": {
          "description": "The number of this type of item within this packaging or for continuous items such as liquids it is the quantity (for example 25ml). See also PackagedProductDefinition.containedItemQuantity (especially the long definition).",
          "$ref": "Quantity.schema.json#/definitions/Quantity"
        }
      },
      "type": "object",
      "additionalProperties": false,
      "required": [
        "item"
      ]
    }
  }
}